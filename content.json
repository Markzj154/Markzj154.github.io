{"pages":[],"posts":[{"title":"变量与运算符","text":"变量概念：变量是在程序中开辟空间存储数据用的语法：变量名 = 值说明：变量名由程序员自己命名变量名命名要求：为标识符，但不能是关键字；而且要遵守PEP8命名规范(即变量名中所有的字母都小写，如果由多个单词组成，单词之间用下划线隔开；在命名时，要做到见名知义，看见变量名大概知道变量名中存储的是什么数据) =： 赋值符号，将右边的值赋给左边的变量值：任何有结果的表达式，可以是具体的数据，也可以是赋值过的变量，也可以是运算表达式 1234567891011121314num = 100name = \"小明\"num2 = num# 修改变量num的值num = 200# 变量可以存储不同的数据类型num = \"mark\"# 变量必须先声明/赋值再使用# 同时声明声明多个变量，赋相同的值：变量名1=变量名2=变量名3= ... = 值a = b = c = 10print(a, b, c)# 同时声明多个变量，赋不相同的值：变量名1， 变量名2， 变量名3， ... = 值1， 值2， 值3，...name, age, gender = \"铭\", 22, \"man\"print(name, age, gender) 声明变量和给变量赋值的原理（重要）先在内存中开辟空间存储数据，（内存空间的大小由数据的大小动态分配），然后再将保存数据的内存空间的地址赋给变量用一个变量给另一个变量赋值的时候，实质是将变量中的地址赋给新的变量 运算符：数学运算符、比较运算符、逻辑运算符、位运算、赋值运算符运算符的优先级：数学运算符&gt;比较运算符&gt;逻辑运算符&gt;赋值运算符&gt;位运算符数学运算符的优先级：** &gt; * &gt; / &gt; // &gt; % &gt; + &gt; - 逻辑运算符：and(逻辑与运算), or(逻辑或运算), not(逻辑非运算)所有的逻辑运算符的运算对象是布尔，结果也是布尔 and:a.运算规则：两个都为True结果才是True，只要一个是False结果就是Falseb.什么时候用：当希望多个条件同时满足的时候，就用and将多个条件连接，and相当于生活中的并且 1234grade = 4score = 88# 1）条件：grade&gt;=4并且score&gt;=90print(grade &gt;= 3.5 and score &gt;= 90) or:a.运算规则：两个都为False结果才为False，只要有一个是True结果就是Trueb.什么时候用：当希望多个条件只要有一个满足的时候，就用or将多个条件连接，or相当于生活中的或者 1234grade = 4score = 88# 1）条件：grade&gt;=4并且score&gt;=90print(grade &gt;= 3.5 or score &gt;= 95) not:a.运算规则：True变False， False变Trueb.什么时候使用：对某个条件进行否定 短路操作逻辑与运算的短路操作：当and前面的表达式的值是False的时候，程序不会再去执行and后面的表达式逻辑或运算的短路操作：当or前面的表达式的值是True的时候，程序不会再去执行or后面的表达式 12345678练习1# 1）判断一个数能否被2或者5整除num1 = int(input(\"please input a number:\"))print(num1 % 2 == 0 or num1 % 5 == 0)# 2）判断一个数是否能同时被2和5整除print(num1 % 2 == 0 and num1 % 5 == 0)# 3）判断一个数是否是3或者7的倍数，并且这个数的末尾不是3print((num1 % 3 == 0 or num1 % 7 == 0) and num1 % 10 != 3) 赋值运算符: =, +=, -=, =, /=, %=, //=, *=不管是什么样的赋值运算符，最终的操作都是给变量赋值；所以赋值运算符的左边必须是变量复合和赋值运算符：先将赋值符号左边变量中的值取出来，然后进行指定的运算，最后将运算结果再从新赋值给左边的变量注意：复合的赋值运算符的左边必须是已经赋值过的变量 位运算：&amp;(按位与运算)， |(按位或运算)，^(按位异或)， ~(按位取反)， &lt;&lt;(左移)， &gt;&gt;(右移)1、按位与数字1 &amp; 数字2 –&gt; 两个数字补码上相同位置上的数，如果都是1结果就是1， 如果有一个是0结果就是01 &amp; 1 -&gt;11 &amp; 0 -&gt;00 &amp; 1 -&gt;00 &amp; 0 -&gt;0 2、按位或数字1 | 数字2 –&gt; 两个数字补码上相同位置上的值如果都是0结果才是0，只要有一个1结果就是11 | 1 -&gt;11 | 0 -&gt;10 | 1 -&gt;10 | 0 -&gt;0 3、按位取反~数字 –&gt; 将数字补码上的每一位的值由0变成1，1变成0~1 -&gt;0~0 -&gt;1 4、按位异或数字1 ^ 数字2 –&gt; 两个数补码上相同位置上的值，如果相同结果是0，不同结果是11 ^ 1 -&gt; 01 ^ 0 -&gt; 10 ^ 1 -&gt; 10 ^ 0 -&gt; 0特点：一个数异或同一个数两次，结果就是这个本身 5、左移数字 &lt;&lt; N –&gt; 让数字的补码整体左移N位，低位用0补充（数字* （2**N）） 6、右移数字 &gt;&gt; N –&gt; 让数字的补码整体右移N位，正数高位补0，负数高位补1（数字//（2**N）） 应用：1、乘2的次方或者整除2的次方的操作(&lt;&lt;, &gt;&gt;)2、数字 &amp; 1 == 0 -&gt; 偶数；数字 &amp; 1 == 1 -&gt; 奇数","link":"/变量与运算符/"},{"title":"进制","text":"print()函数print()函数，功能是在控制台输入括号中的内容 1print(\"hello world!\") 注释注释是代码中对代码进行解释和说明的文本内容；不会影响程序的功能和执行 单行注释：在一行文字的前面加#多行注释：将注释内容写在三个双引号或三个单引号里面（但一般使用三个双引号） 语句一条语句占一行，语句结束后不用加分号如果一行要显示多行语句，语句必须用分号隔开 12num_1 = 1num_2 = 2 ; num_3 = 3 如果一条语句很长，需要多行显示的时候，可以在与语句中\\然后再换行（注意：不能破坏数据本身） 123num1 = 12 + 2 + 23 - 34\\ - 22 + 2print(num1) 缩进python中一行代码的开头不能随便的加缩进（空格或者制表符）python语法要求必须要有缩进的位置一定要加缩进 1234if num &gt; 10: print(num) else: print(None) 标识符标识符是用来命名用的，一般是给变量命名、函数命名或者类命名……标识符规则：所有标识符都必须是由字母、数字、下划线组成；不能以数字开头注意：python2.x以后，标识符中可以出现中文、日语、韩语等符号，但是实际开发不建议使用 关键字（保留字）关键字就是python中有特殊功能和特殊意义的标识符 12345678910import keywordprint(keyword.kwlist)\"\"\"['False', 'None', 'True', 'and', 'as', 'assert','break', 'class', 'continue', 'def', 'del', 'elif','else', 'except', 'finally', 'for', 'from','global', 'if', 'import', 'in', 'is', 'lambda','nonlocal', 'not', 'or', 'pass', 'raise','return', 'try', 'while', 'with', 'yield']\"\"\" 常见数据类型和数据数字数据：整型(int)、浮点型(float)字符串(str)：用双引号或者单引号将文本数据引起来布尔(bool)：只有False、True两个值，True代表真/肯定，False代表假/否定列表(list)、元组(tuple)、集合(set)、字典(dict)、函数(function)等类型转换：类型名（数据）-&gt;将括号中的数据转换成指定的类型并返回 12print(int(2.33))print(float(10)) print和inputprint函数:输出函数，在控制台打印print后面括号中的内容的结果input函数:获取从控制台输入的的内容(输入回车的时候就完成)input(提示信息)；不管在键盘上输入的是什么，input返回的结果的类型都是字符串类型 12value = input('hello world:')print(value, type(value)) 计算机只能存储和处理二进制数据int类型–包含所有的整数，整数可可以表示为十进制、二进制、八进制和十六进制 十进制a.基数:0,1,2,3,4,5,6,7,8,9b.进位:逢十进一c.位权:123 = 100 + 20 + 3 = 110^2 + 210^1 + 3*10^0d.表示方式:默认写入为十进制 二进制a.基数:0, 1b.进位:逢二进一c.位权:111(2) = 12^2 + 12^1 + 1*2^0 = 7(10)d.表示方式:在二进制数前加上前缀0b或0Be.转换:直接打印 八进制a.基数:0, 1, 2, 3, 4, 5, 6, 7b.进位:逢八进一c.位权:111(8) = 18^2 + 18^1 + 1*8^0 = 73(10)d.表示方式:在八进制数前加上前缀0o或者0Oe.转换:oct() 十六进制a.基数:0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A/a, B/b, C/c, D/d, E/e, F/fb.进位:逢十六进一c.位权:111(16) = 116^2 + 116^1 + 1*16^0 = 273(273)d.表示方式:在十六进制数前加上前缀0x或0Xe.转换:hex() 123456789num_2 = 0b1101print('转二进制', bin(100), bin(0o100), bin(0x100e))print(num_2)num_8 = 0o67print('转八进制', oct(0b100), oct(100), oct(0x100e))print(num_8)num_16 = 0xe34aprint('转十六进制', hex(100), hex(0o100), hex(0b100))print(num_16) 计算机存数据的时候，只能存数字，而且存的是数字的二进制的补码位(bit)1字节(byte) = 8bit1kb = 1024byte1M = 1024kb1G = 1024M1T = 1024G 注意：正数的原码、反码、补码一样1、原码 = 符号位(0表示正，1表示负) + 真值(数字转换成二进制的值)10 -&gt; 1010(真值) -&gt;101010的原码:00000000 00000000 00000000 00001010-10的原码:10000000 00000000 00000000 000010102、负数的反码:符号为不变，其他位取反(0变1，1变0)10的反码:00000000 00000000 00000000 00001010-10的反码:11111111 11111111 11111111 111101013、负数的补码:反码加110的补码:00000000 00000000 00000000 00001010-10的补码:11111111 11111111 11111111 11110110","link":"/进制/"},{"title":"分支与循环","text":"python中的分支结构只有if语句if语句：a.语法：满足某个条件才执行某段代码if 条件语句：&emsp;&emsp;代码段 b.说明：if – 关键字，固定写法&emsp;&emsp;条件语句 – 可以是一个具体的数据，也可以是一个已经赋值过的变量，或者是运算表达式（不能是赋值语句）&emsp;&emsp;: – 固定写法&emsp;&emsp;代码段 – 一条或者多条和if保持一个缩进的语句（任何语句）c.执行过程：先判断条件语句的结果是否为True（如果不是布尔就先转换为布尔），如果为True就执行代码段，然后再执行后面其他的 语句，如果是False，不执行代码段，直接执行其他语句 补充：布尔值转换 – python中所有的数据都能转换成布尔，所有为0为空的值都会转换成False，其他都是True 123456#输入年龄，如果输入的年龄值大于等于18岁，打印\"可以进网吧\"age = int(input(\"请输入一个整数：\"))if age &gt;= 18: print(\"可以进网吧\")else: print(\"未成年禁止入内\") if - else 语句：满足条件执行某段代码，不满足这个条件的时候执行另外一段代码a.语法：if 条件语句1:&emsp;&emsp;代码段1else:&emsp;&emsp;代码段2b.说明：if/else – 关键字，固定写法条件语句 – 可以是一个具体的数据，也可以是一个已经赋值过的变量，或者是运算表达式（不能是赋值语句）– 固定结构代码段1 – 和if保持一个缩进的一条或者多条语句（满足if后面的条件才会执行）代码段2 – 和else保持一个缩进的一条或者多条语句（if后面的条件不成立才会执行）c.执行过程：先判断条件语句是否为True，如果为True就执行代码段1，否则执行代码段2if - elif - else语句： 条件有多个（有关联）时，执行不同的代码段a.语法：if 条件语句1:&emsp;&emsp;代码段1elif 条件语句2:&emsp;&emsp;代码段2elif 条件语句3:&emsp;&emsp;代码段3 . . .else:&emsp;&emsp;代码段nb.执行过程：先判断条件语句1是否为True,如果为True就执行代码段1，然后整个if结构结束直接执行其他语句； 如果条件语句1为False，就判断条件语句2是否为True，为True就执行代码段2再执行其他语句； 如果条件语句2为False，就判断条件语句3是否为True，为Ture就执行代码段3再执行其他语句； 以此类推 如果所有的条件语句都是False，就执行代码段n，再执行其他语句 123456789101112131415161718# 根据输入的年龄值，判断年龄处于的阶段age = int(input(\"please input a number:\"))if 0 &lt; age &lt; 3: print(\"幼儿\")elif age&lt;= 12: print(\"儿童\")elif age &lt;= 18: print(\"青少年\")elif age &lt;= 28: print(\"青年\")elif age &lt;= 50: print(\"壮年\")elif age &lt;= 75: print(\"中老年\")elif age &lt;= 100: print(\"老年\")else: print(\"成仙\") if语句嵌套再if结构中的if、else、elif后面的代码段中，还可以写其他的if语句 1234567num = int(input(\"please input a number:\"))if num &amp; 1 == 1: print(\"奇数\")else: print(\"偶数\") if num % 4 == 0: print(\"是4的倍数\") for循环：a.语法：for 变量名 in 序列:&emsp;&emsp;循环体b.说明：for – 关键字变量名 – 要求和声明变量的时候的变量名一样in – 关键字序列 – 容器型数据型类型的数据，例如：字符串、列表、元组、字典、集合、迭代器、生成器、range循环体 – 和for保持缩进的一条或者多条语句；循环体中的代码就是需要重复执行的代码c.执行过程：让变量去序列中取值，一个一个的取，取完为止，每取一个值执行一次循环体（python中控制for循环的循环次数，是通过控制in后面序列元素的个数来控制的） 123# 练习：打印十行\"===\"for k in \" \"*10: print(\"====\") range函数 – 产生指定范围内的数字序列range(n) – 产生0到n-1的整数数列range(m, n) – 产生m到n-1的整数数列range(m, n, step) – 从m开始每次加step产生下一个数，直到n前一个为止 12345678910111213141516print(list(range(10)))for i in range(10): print(i)for i in range(1, 10): print(i)# 练习：使用循环计算1+2+3+...+100num = 0for i in range(1, 101): num += iprint(num)# 练习：统计100以内能够被2整除但是不能被3整除的个数n = 0for i in range(100): if i % 2 == 0 and i % 3 != 0: n += 1print(n) while循环a.语法：while 条件语句：&emsp;&emsp;循环体b.说明：while – 关键字条件语句 – 只要有结果的表达式都可以（赋值语句不行）循环体 – 和while保持一个缩进的一条或者多条的语句；（需要重复执行的代码放在循环体中）c.执行过程先判断条件语句是否为True，如果为True就执行循环体，执行完循环体再判断条件语句是否为True，为True又执行循环体，以此类推，当判断条件语句的结果为False，整个循环结束，指向后面的其他语句 for和while循环怎么选循环次数确定的时候使用for循环循环次数不确定和死循环要使用while循环 12345# 练习：num = int(input(\"please input a number:\"))while num != 0: num = int(input(\"please input a number:\"))print(\"ok\") 123456789account = int(input(\"请输入账号：\"))pwd = int(input(\"请输入密码：\"))while account != 666 or pwd != 123456: print(\"账号或者密码错误!\") account = int(input(\"请重新输入账号：\")) pwd = int(input(\"请重新输入密码：\")) while account == 666 and pwd == 123456: print(\"登录成功\") break 12345678# 练习：输入数字，直到输入的数字是0，统计输入偶数的个数num = int(input(\"please input number:\"))n = 0while num != 0: if num % 2 == 0: n += 1 num = int(input(\"please input number:\"))print(n) continue：continue是能出现在循环体中的关键字；当执行循环体的时候遇到了continue，当次循环结束，执行进入下次循环的判断 break:只能用在循环体中的关键字执行循环体的时候，如果遇到break，整个循环直接结束 else：for 变量 in 序列:&emsp;&emsp;循环体else:&emsp;&emsp;代码段 while 条件语句:&emsp;&emsp;循环体else:&emsp;&emsp;代码段执行过程：如果循环自然结束，else后面的代码段会执行，如果循环是因为遇到break而结束， else后面的代码段不会执行 123456789sum1 = 1num = 1while True: num += 1 sum1 += num if sum1 &gt;10000: print(num-1) print(sum1) break 123456for i in range(4): print(i) breakelse: print(\"-------\")print(\"=========\")","link":"/分支和循环/"},{"title":"列表","text":"列表：概念：列表是容器型数据类型（序列），将[]作为容器的标志，多个元素用逗号隔开特点：可变的（指的是列表中元素可变-元素支持增删改）、有序的（支持下标操作）声明列表：变量名 = [元素1, 元素2, 元素3, …]列表中的元素：任何类型的数据都可以作为列表元素；同一个列表中的数据的类型可以不一样 获取单个元素：a.语法：列表[下标] –&gt; 获取列表中指定下标对应的元素 b.说明：列表 –&gt; 结果是列表的表达式（列表数据、列表变量等）[] –&gt; 固定写法下标 –&gt; 下标又叫索引；列表中每个元素都有固定的下标值来表示元素在列表中的位置 范围：0~长度-1 –&gt; 从前往后数 -1， -2， ~ -长度 –&gt; 从后往前数 获取部分元素:a.语法：列表[开始下标: 结束下标: 步长] –&gt; 从开始下标开始，每次下标增加步长去取下一个元素，直到取到结束下标前为止也叫做切片(切片的结果是一个列表)注意：步长为正表示开始下标到结束下标是从前往后取，所以开始下标对应的元素必须在结束下标对对应元素的前面，否则结果是[] 步长为负表示开始下标到结束下标是从后往前取，所以开始下标对应的元素必须在结束下标对对应元素的后面，否则结果是[] 省略步长：默认步长为1省略开始下标：步长为正，从第一个元素开始往后取；步长为负，从最后一个元素往前取省略结束下标：步长为正，取到最后一个为止，步长为负，取到第一个为止两个都省：相当于浅拷贝 遍历：将列表中的元素一个一个的取出来1）直接遍历元素for 变量 in 列表:&emsp;&emsp;循环体2)通过遍历下标来遍历列表元素len(列表)获取列表中元素的个数for index in range(len(列表)) 12345678910111213names = [\"路飞\", \"索隆\", \"山治\", \"娜美\", \"布鲁克\", \"乔巴\", \"弗兰克\"]print(names[3], names[-4])print(names[0:3:1])print(names[6:3:-1])print(names[:4:-1])score = [60, 66, 95, 88, 55, 76, 98, 88]for s in score: print(s)for i in range(len(score)): if score[i] &lt; 80: score[i] = 90print(score) 1、增（增加列表中的元素）列表.append(元素) –&gt; 在列表的最后添加一个元素列表.insert(index, 元素) –&gt; 在指定的索引处插入元素 1234films = [\"肖生克的救赎\", \"权力的游戏\", \"复仇者联盟\", \"雷神\", \"钢铁侠\", \"教父\", \"速度与激情\", \"玩命速递\"]films.append(\"极限挑战\")films.insert(0, \"海贼王\")print(films) 2、删（删除列表中的元素）1)del 列表[下标] –&gt; 删除列表中指定下标对应的元素(下标不能越界)2)remove(元素) –&gt; 删除列表中第一个指定元素的值(元素必须存在)3)列表.pop(下标) –&gt; 取出列表中指定下标对应的元素，返回被取出的元素 列表.pop() –&gt; 取出列表中是最后一个元素，返回被取出的元素 3、改（修改列表中列表的值）列表[下标] = 新值 列表运算1、列表的数学运算：+， *列表1 + 列表2 –&gt; 将两个列表中的元素合并产生一个新的列表；（不会修改原来的列表）列表 * N 、 N * 列表 –&gt; N是正整数；列表中的元素重复N次产生一个新的列表 1234print([1, 2, 3] + [4, 5, 6])list1 = [11, 22, 33]print(list1 + [44, 55], list1)print(list1 * 3) 2、列表的比较运算： ==，!=, &gt;, &lt;, &gt;=, &lt;=列表1 == 列表2 、 列表1 != 列2两个列表的大小，不是比较列表的长度，而是比较相对应位置值的大小补充：is的用法== –&gt; 判断两个数据的值是否相等is –&gt; 判断两个数据的地址是否一样 1234list2 = [1, 2, 3]list3 = [1, 2, 3]print(list2 == list3)print(list2 is list3) 3、in 和not in元素 in 列表 –&gt; 判断列表中是否存在指定的元素元素 not in 列表 –&gt; 判断列表中是否不存在指定的元素 4、内置函数：max(序列), min(序列) sum(序列), len(序列)， list(序列)max和min要求序列中的元素类型必须一致，并且元素支持比较运算符sum要求序列中的元素必须是数字list() –&gt; 只有容器型数据类型才能转换成列表，将序列中的元素作为列表的元素产生一个新列表 列表方法列表.count(元素) –&gt; 统计列表中指定元素的个数列表.extend(序列) –&gt;将序列中的元素添加到列表的后面列表.index(元素) –&gt; 获取元素在列表中的下标（如果元素有多个只取第一个，要取的元素不存在会报错）列表.reverse() –&gt; 让列表倒序(不会产生新的列表)列表.sort() –&gt; 将列表中的元素从小到大排序列表.sort(reverse=True) –&gt; 将列表中的元素从大到排序注意：列表中的元素类型必须一样，并且元素支持比较运算符，不会产生新的列表sorted() –&gt; 对序列中的元素从大到小排序，产生一个新的序列sorted(序列, reverse=True) –&gt; 对序列中的元素从大到小排序，产生一个新的序列列表.clear() –&gt; 清空列表列表.copy() –&gt; 和[:]的效果一样，拷贝列表中的元素产生一个新的列表（这儿的拷贝是浅拷贝） 123456789list1 = [1, 2, 3]list1.extend(\"hello\")print(list1)list2 = [12, 4, 234, 33, 56, 67 ,34, 56]list2.sort(key=lambda num :num % 10)print(list2)list3 = [1, 2, 4, 84, 13, 3, 42, 45]print(sorted(list3))","link":"/列表/"},{"title":"元组和数字","text":"元组什么是元组元组就是不可变的列表元组是容器型数据类型，将小括号作为容器的标志，多个元素用”,”隔开：(元素1， 元素2， …)特点：不可变（不支持增删改）、有序（支持下标操作）元组中的元素 –&gt; 和列表要求一样 1、元组的表示单个元素的元组:(元素,)单独表示一个元组值的时候，小括号可以去掉 12tuple1 = 2, 3print(tuple1 * 2) 2、列表中获取元素的方式都支持；注意：切片的结果是元组1234567weeks = \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"print(weeks[0])print(weeks[:])for i in range(len(weeks)): print(weeks[i])for j in weeks: print(j) 获取部分元素：变量1, 变量, 变量, …= 元组用变量去获取元组中元素的值（要求前面变量的个数和元组中元素的个数一致） 123tuple2 = 1, 2, 3a, b, c = tuple2print(a, b, c) 语法：多个变量某一个变量前带 = 元组让不带的变量去元组中获取元素，剩下的全部给带的变量(带*的变量会变成列表) 123tuple3 = '小明', 18, 'man', 67, 77, 87, 88name, age, sex, *grade = tuple3print(name, age, sex, grade) 3、元组相关的操作：和列表一样1234567891011121314tuple4 = 1, 2, 3tuple6 = 1, 2, 3tuple5 = 4, 5, 6print(tuple4 + tuple5)print(tuple5 * 2)print(1 in tuple4)print(3 not in tuple4)print(tuple4 &gt; tuple5)print(tuple5 == tuple5, id(tuple5))print(tuple4 is tuple6, id(tuple4), id(tuple6))print(max(tuple6), min(tuple5))print(sum(tuple5))print(len(tuple5))print(tuple(\"hello\")) python中数字相关的类型有：int(整型)，float(浮点型), bool(布尔), complex(复数)1、整型所有的整数对应的数据类型，python.x中整型对应的数据类型只有int,python2.x除了int还有longint(数据) –&gt; 将数据转换成整数，所有小数，布尔值和部分字符串可以转换成整数，字符串只有去掉引号后本身就是一个整数的字符串才能转换成整型 12345print(int(3.1), int(3.89))print(int(True), int(False))print(int('23'), int('+12'), int('-12'))print(int())` 2、浮点型所有的小数对应的类型，浮点型对应的数据类型只有float；支持科学记数法float(数据) –&gt; 整型、布尔和部分字符串可以转换成浮点型，字符串只有去掉引号后本身是一个数字的字符串才能转换成浮点型 1234print(float(3))print(3e2)print(float(True), float(False))print(float('23'), float('23.12')) 3、布尔布尔中的True本质就是整数1，False本质是整数0bool –&gt; 所有的数据都可以转换成布尔；所有为0为空的都会转换成False，其他的都为True 123print(1 + True, True * 10, True /2)print(False + 12)print(bool(0), bool(0.0), bool(''), bool([]), bool(()), bool({}), bool(None)) 4、复数由实部和虚部组成数字叫复数：a + bj(a是实部，b是虚部，j是虚数单位)，对应的类型是complex；python直接支持复数的运算 12345m = 10 + 20jm2 = 10 - 1j # 虚部是1不能省略print(m + m2)print(m * m2)print(m / m2) python内置了一个模块叫random，提供了和随机操作相关的方法123456789101112# 1)random.randint(m, n) 产生随机m-n的整数print(random.randint(0, 10))# 2)random.random() 产生0-1的随机数（小数）print(random.random())# 3)print(random.randrange(m, n, step)) 产生序列range(m, n, step)中的任意一个整数print(random.randrange(0, 10, 2))# 4）random.choices(序列， k=N) 在序列中随机获取N个元素，以列表的形式返回，N默认是1names = ['小明', '小红', '小李', '小张', '小王']print(random.choices(names, k=2))# 5）random.shuffle(列表) 随机打乱列表元素的位置random.shuffle(names)print(names)","link":"/元组和数字/"},{"title":"字典和集合","text":"字典(dict)1) 字典字典是容器型数据类型(序列)，将{}作为容器的标志，里面多个元素用逗号隔开特点：可变的（支持增删改），无序（不支持下标操作）2) 字典中的元素字典中的元素都是键值对，以’键:值’的形式成对出现 –&gt; {键1: 值1, 键2: 值2, …}字典存储数据主要是为了存值，键只是为了区分不同的值而存在的 键值对中的键 –&gt; 键必须不可变；唯一的（如果有一样的键，前面的将会被后面的键值对覆盖）键值对中的值 –&gt; 和列表一样，任何数据都可以作为值 12345student_1 = {'name': '小明', 'age': 21, 'sex': 'man', 'grade': [{'chinese': 76}, {'math': 77}, {'english': 86}, {'physics': 76}, {'chemistry': 88}, {'biology': 90}]}print(student_1) 1、查 –&gt; 获取字典的值1) 获取单个元素的值字典[key] –&gt; 获取字典中指定key对应的值,如果key不存在会报错字典.get(key) / 字典.get(key, 默认值) –&gt; 获取字典中指定key对应的值;如果key不存在返回None或者默认值2) 遍历for - in –&gt; 字典直接拿到的是字典中的keyfor key in 字典:（常用的遍历方式直接取key，推荐使用）&emsp;&emsp;passfor value in 字典.values():(不推荐使用)&emsp;&emsp;passfor key, value in 字典.items():（不推荐使用）&emsp;&emsp;pass 12345678910dog = {'name': '旺财', 'age': 3, 'color': 'white', 'variety': '二哈', 'gender': 'male'}print(dog['name'], dog['variety'])print(dog.get('name'))print(dog.get('ages', '年龄改为4'))for key in dog: print(key, dog[key])for value in dog.values(): print(value)for key, value in dog.items(): print(key, value) 2、增/改增 –&gt; 增加键值对改 –&gt; 修改字典中某个key对应的值语法：字典[key] = 值 –&gt; 当key不存在就在字典中添加键值对’key:值’；当key存在的时候就修改字典中key对应的值 12345dog = {'name': '旺财', 'age': 3, 'color': 'white', 'variety': '二哈', 'gender': 'male'}print(dog)dog['variety'] = '拉布拉多'dog['weight'] = 23print(dog 3、删 –&gt; 删除key对应的值1) del 字典[key] –&gt; 删除指定key对应的键值对2) 字典.pop(key) –&gt; 取出字典中key对应的值；会返回被取出来的值 4、相关运算字典不支持：+, *, &gt;, &lt;, &gt;=, &lt;=支持：==， != 5、相关操作：in, not in, max, min, sum, len, dictkey in 字典 –&gt; 判断字典中是否存在某个键dict(数据) –&gt; 将指定的数据转换成字典数据的要求：1. 数据本身是一个序列 &emsp; 2.序列中的元素必须是有且只有两个元素的小序列 1234567print(2 in {&apos;a&apos;: 1, &apos;b&apos;: 2})print(&apos;a&apos; in {&apos;a&apos;: 1, &apos;b&apos;: 2})dict1 = {&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3}print(max(dict1))dict2 = {10: 11, 20: 22, 30: 33}print(sum(dict2))print(dict([[1, 2], (3, 4), &apos;ef&apos;])) 6、相关方法1) dict.fromkeys(序列, 值1=None) –&gt; 创建一个新的字典字典中的元素作为字典的key，将值1作为每个key对应的value 1234dict3 = dict.fromkeys('abc')print(dict3)dict4 = dict.fromkeys(range(1, 10), 100)print(dict4) 2) 字典.item() –&gt; 将字典中的键值对转换成元组作为容器中的元素3) 字典.values(), 字典.key()4) 字典.setdefault(key, value=None) –&gt; 在字典中添加键值对（key存在的时候不会有修改的作用） 123student = {'name': '小明'}student.setdefault('age', 18)print(student) 5) 字典1.update(字典2) –&gt; 将字典2中的键值对全部添加到字典1中 12345dict1 = {'a': 1, 'b': 2, 'c': 3}dict2 = {'x': 10, 'y': 100, 'z': 1000}dict1.update(dict2)print(dict1)` 练习：用一个列表保存5只狗的信息，每只狗有名字、年龄、颜色和体重1. 求5只狗的平均值 &emsp;2. 找到5只狗的体重最大的狗的名字123456789101112131415dogs = [{'name': '二哈', 'age': 3, 'color': 'white', 'weight': 20}, {'name': '拉布拉多', 'age': 2, 'color': 'white', 'weight': 22}, {'name': '藏獒', 'age': 3, 'color': 'gray', 'weight': 24}, {'name': '中华田园犬', 'age': 3, 'color': 'black', 'weight': 22}, {'name': '莽哥', 'age': 3, 'color': 'green', 'weight': 26}, ]ages = 0for dog in dogs: ages += dog['age']print(ages/5)weights = 0for dog in dogs: if dog['weight'] &gt; weights: weights = dog['weight']print(weights) 集合(set)1) 集合集合是容器型数据类型（序列）；将{}作为容器的标志，多个元素用逗号隔开（和字典不一样，集合的元素是独立的数据不是键值对）特点：可变（增删）、无序（不支持下标操作）注意：{}表示空字典，不是空集合，空集合用set1 = set()表示2) 元素 –&gt; 不可变的数据；元素唯一集合自带去重功能 1、集合元素的增删改查1) 查 –&gt; 只支持遍历，不能单独获取具体某一元素2) 增 –&gt; 添加元素集合.add(元素) –&gt; 在集合中添加一个元素集合.update(序列) –&gt; 将序列中所有元素添加到集合中3) 删 –&gt; 删除元素集合.remove(元素) –&gt; 删除集合中指定的元素4) 改（集合不支持修改元素的操作） 2、数学集合运算1) 求并集：集合1|集合2 –&gt; 将两个集合的元素合并，并且去重2) 求交集：集合1 &amp; 集合2 –&gt; 获取两个集合公共的部分3) 求差集：集合1 - 集合2 –&gt; 获取集合1中除了集合2中的元素剩下的部分4) 对称差集：集合1 ^ 集合2 –&gt; 两个集合除了公共部分剩下的部分5) 集合1 &gt; 集合2 –&gt; 判断集合1是否包含集合26) 集合1 &lt; 集合2 –&gt; 判断集合2是否包含集合1 12345678set1 = {1, 2, 3, 4, 5}set2 = {3, 4, 5, 6, 7}print(set1 | set2)print(set1 &amp; set2)print(set1 - set2)print(set2 - set1)print(set1 ^ set2)print({1, 2, 3, 4} &gt; {1, 2}) 3、集合的相关方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455set1 = {1, 2, 3, 'a', 'b', 'c'}set2 = {3, 4, 5, 'c', 'd', 'f'}set3 = set1.copy()print(set3)print(set1.difference(set2))# 相当于set1-set2set1.difference_update(set2)print(set1)# difference_update方法与difference方法的区别在于difference方法返回一个移除相同元素的新集合，# 而difference_update方法是直接在原来的集合中移除元素，没有返回值。set3.discard(2)print(set3)# 删除集合中指定的元素print(set2.intersection(set3))# 返回集合的交集set2.intersection_update(set3)print(set2)# 返回集合的交集print(set1.isdisjoint(set2))# 判断两个集合是包含相同的元素，如果没有返回True，否则返回Falseprint(set2.issubset(set3))# 判断指定集合是否为该方法参数集合的子集print(set3.issuperset(set2))# 判断该方法的参数集合是否为指定集合的子集print(set1.pop())# 随机移除元素set1.remove('a')print(set1)# 移除指定元素print(set1.symmetric_difference(set3))# 返回两个集合中不复的元素集合set3.symmetric_difference_update(set2)print(set3)# 移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中的不同元素插入到当集合中。 print(set1.union(set2))# 返回两个集合的并集set1.update([1, 3, 'a', 'c'])print(set1)# 给集合添加元素print(set1, set2, set3)","link":"/字典和集合/"},{"title":"字符串","text":"字符串1) 字符串字符串是容器型数据类型（序列）；以单引号或者双引号作为容器的标志，引号中的所有内容都是字符串的元素‘asd’ –&gt; 三个元素‘we,we,e’ –&gt; 七个元素特点：不可变的，有序（支持下标操作）2) 字符串的元素 字符串中的元素又叫字符（注意：python中有字符的概念，但是没有字符类型；长度是1的字符串就可以看成字符）a.普通字符：字母、数字、各国的文字和符号等（可以直接写在引号中的符号）b.转义字符：在字符串中在一些特定符号前加\\来表示特殊的功能和意义\\ - \\t - tab键（制表符）；len为1 1、编码字符：\\u4为16进制数 –&gt; 将4为16进制数对应的编码转换成字符1) 字符编码计算机只有直接存储数字的能力，不能直接存储字符；当许需要用计算机存储字符的时候，实质存的是字符对应的固定的数字，每一个字符和数字对应的关系叫编码表2) ASCII编码表和Unicode编码表ASCII编码表是由美国国家标准制定的专门针对美国符号及逆行编码的，里面包含一些特殊符号、字母、和数字（不包含中文等）python采用的是Unicode编码表：Unicode编码表是对ASCII表的扩展中文的Unicode编码范围为4e00-9fa53) 字符编码相关的方法chr(编码值) –&gt; 将编码值传换成字符ord(字符) –&gt; 获取字符对应的编码值 1234567891011121314151617str1 = 'qw\\'qwe'str2 = 'hello\\\\now'str3 = '\\t bool'print(str1)print(str2)print(str3, len(str3))count = 0for i in range(0x4e00, 0x9fa5): print(chr(i), end=\" \") count += 1 if count % 30 == 0: print()print(ord('锦'), ord('先'), ord('森'))print(ord('a'))print(chr(123)) 2、获取字符12345678910111213str1 = 'hello world!'# 1）获取单个字符print(str1[0])# 2)字符串切片# 练习：统计一个字符串中小写字母的个数count = 0str2 = 'Hello World! Thank you'for i in str2: if 97 &lt;= ord(i) &lt;=122: count += 1 print(i, end=\"\")print() print(count) 3、字符串操作1234567891011121314151617181920212223242526272829303132#1）+ 和*#字符串1 + 字符串2 --&gt; 将字符串1和字符串2拼接到一起产生一个新的字符串#字符串 * N / N * 字符串 --&gt; 字符串重复N次产生一个新的字符串str1 = 'abc'str2 = '123'print(str1+str2)print(str1 * 3)# 2）== 、 !=print('qwe' == 'qwe')print('qwe' == 'qew')# 3)&gt;, &lt;, &gt;=, &lt;=# 只能两个字符串比较大小 --&gt; 从前往后找到第一组不相等的字符，比较它们编码值得大小，谁的编码值大哪个字符串就大print('abc' &gt; 'acb')print('abc' &gt; 'ab')print('\\u4e00', '\\u9fa5', ord('\\u4e00'), chr(19968))# 4)in / not in# 字符串1 in 字符串2 --&gt; 判断字符串2中是否包含字符串1# 5）len, max, min, sorted, str# 注意：转义字符和编码字符的长度都是1#字符串转换：所有的数据都可以转换成字符串，转换的时候将数据房在引号中# 6）r语法# 在字符串的最前面加r或R，可以阻止字符串中所有的转移字符转义# 7）格式字符串#在字符串中用格式占位符表示字符串中不确定的部分#a.语法：包含格式占位符的字符 % (数据1, 数据2, ...) --&gt; ()中数据的个数和类型要和前面格式占位符一一对应#b.格式占位符#%s --&gt; 字符串 #%d --&gt; 整数#%.Nf --&gt; 浮点数,N表示控制小数点后的位数#%c --&gt; 字符(可以将数字转换成字符)#注意：所有的数据都可以使用%s来做格式占位符，所有的数据都可以使print('{} {:.3f} {} {h}'.format(1, 2.2343223, 3, h='hello')) 4、对齐方式字符串.center(宽度, 填充字符=’ ‘) -居中字符串.ljust(宽度, 填充字符=’ ‘) - 左对齐字符串.rjust(宽度, 填充字符=’ ‘) - 右对齐字符串.zfill(宽度) 12345str1 = 'zxc'print(str1.center(9))print(str1.ljust(9))print(str1.rjust(9))print(str1.zfill(9)) 5、统计字符串的个数12345# 字符串1.count(字符串2) --&gt; 统计字符串1中字符串2出现的个数str2 = 'we are we hello ww'print(str2.count('we'))print(str2.count('w'))print(str2.count('w', 0, 10)) # 在下标是[0, 12)之间统计w的个数 6、获取字串下标12print(str2.find('a'))print(str2.index('a')) 7、join方法字符串.join(序列) –&gt; 将序列中的元素用字符串连接产生一个新的字符串要求序列中的元素必须是字符串，如果是字典，会将字典中的键(字符串)连接起来 8、替换字符串1.replace(字符串2, 字符串3, N) –&gt; 将字符串1中前N个字符串2替换成字符串3 1str3 = 'hello world thank you'","link":"/字符串/"},{"title":"函数基础","text":"函数什么是函数函数就是对实现特定功能的代码的封装 函数的分类系统函数（内置函数）– 系统已经声明好的函数(类似已经造好的机器)，程序员会用就行自定义函数 –程序员自己声明的函数（自己造机器） 声明函数 语法：def 函数名(形参列表):&emsp;&emsp;函数说明文档&emsp;&emsp;函数体 说明：def – python中声明函数的关键字（固定格式）函数名 – 和变量名要求一样(): – 固定写法形参列表 – 以’变量名1, 变量名2, 变量名3,…’的形式存在，每个变量就叫形参&emsp;&emsp;&emsp;&emsp;&emsp;形参的个数根据情况可以没有，也可以有多个。&emsp;&emsp;&emsp;&emsp;&emsp;形参的作用是将函数外面的数据传递到函数里面函数说明文档 – 用三个双引号引起来的字符串；作用是对函数的功能进行说明函数体 – 和def保持一个缩进的一行或者多行语句。（实现函数功能的多条语句） 初学者声明的步骤a.确定函数的功能b.根据函数的功能的来确定函数名c.确定函数的参数：看实现函数的功能需不需要从外面传值，需要几个？d.实现函数的功能 注意：声明函数的时候不会执行函数体函数的调用（调用函数相当于使用机器） 语法：函数名(实参列表) 说明：函数名 – 已经声明过的函数的函数名() – 固定写法实参列表 – 以’值1, 值2, 值2, …’形式存在；这儿的每个值就叫实参；实参是用来给形参赋值的12345678910111213# 要求写一个函数实现两个数的和def sum_1(x, y): \"\"\" 求两个数的和 :param x: 参数1 :param y: 参数2 :return: 返回参数1和参数2的和 \"\"\" res = x + y return resx = 1y = 2print(sum_1(x, y)) 函数的调用过程 语法：函数名（实参列表） 调用函数的作用:执行函数体，获取返回值 函数的调用过程：第一步：回到函数声明的位置第二步：传参（用实参给形参赋值）第三步：执行函数体第四步：执行完函数体就确定返回值第五步：回到函数调用的位置，接着往后面执行12345678910111213141516171819202122232425262728293031323334353637383940def sum1(num): \"\"\" 求前num的和 :param num: 参数的值 :return: 返回前num项的和 \"\"\" res = 0 for i in range(num+1): res += i return resprint(sum1(100))def str_1(str1): \"\"\" 打印字符串中所有的字符 :param str1:传入一个字符串 :return:返回字符串中的每个字符 \"\"\" for i in str1: if 'a' &lt;= i &lt;= 'z' or 'A' &lt;= i &lt;= 'Z': print(i, end='')str_1(\"hello world!\")def str_2(str2, char1): \"\"\" 在字符串中的数字后面加一个特殊字符 :param str2: 传入一个带有数字的字符串 :return: 返回一个在数字字符后面加=的字符串 \"\"\" res = '' for j in str2: if '0' &lt;= j &lt;= '9': res += j + char1 else: res += j return resprint()print(str_2('1hello 2world!', '=')) 位置参数和关键字参数根据调用函数的时候传参的方式将参数分为位置参数和关键字参数 位置参数：让实参和形参在位置上一一对应（第一个实参给第一个形参赋值，第二个实参给第二个形参赋值…） 关键字参数：以’形参名=值’的形式传参注意：如果位置参数和关键字参数同时使用，位置参数放在前面，关键字参数放在后面 什么时候使用关键字参数：需要跳过前面某一个或几个参数，直接给后面参数赋值的时候必须要使用关键字参数参数默认值声明函数的时候，形参可以设置默认值，设置完默认值后调用函数的时候有默认值的参数可以不用传参一个函数可以给所有的参数都设置默认值，也可以给部分参数设置默认值；但必须保证没有默认值的参数必须放在有默认值参数的前面参数类型说明： 给参数赋默认值，默认值的类型就是参数的类型 以’参数名:类型名’的形式声明函数不定长参数 在形参前面加一个*号，那么这个参数就可以同时接受多个实参（位置参数）；带*的参数会作为一个元组，对应的多个实参是元组中的元素带*的不定长参数，不能使用关键字参数传参 在形参前加**，那么这个参数也可以同时接受多个实参（关键字参数，关键字自己随便命名）；将带**的参数作为一个字典，将关键字参数的关键字作为key,实参作为value存储在字典中。*args和**kwargs一起使用是为了保证不定长参数传参的时候既可以使用位置参数也可以使用关键字参数补充：*的用法:*列表/*元组 –&gt; 直接取出列表/元组中所有的元素**字典 --&gt; 直接取出字典中的所有元素123456789101112131415161718192021222324252627list1 = [1, 2, 3]print(*list1)def func1(a, b): print(a, b)dict1 = {'a': 1, 'b': 2}func1(**dict1)# 练习：声明一个函数，求多个数的差def fun2(*args): res = args[0] for i in range(len(args)-1): res -= args[i+1] return resprint(fun2(1, 2, 3, 4))def fun3(*args): if not args: return 0 res = args[0] for num in args[1:]: res -= num return resprint(fun3(1, 2, 3, 4, 5)) 什么是返回值返回值就是return关键字后表达式的值（怎么确定函数的返回值）返回值就是函数调用表达式的值（怎么去获取函数的返回值）python中所有函数都有返回值，默认是None 什么是returnreturn是函数体中的关键字（只能在函数中使用），作用有两个：结束函数和确定函数返回值a.结束函数：执行函数体的时候只要遇到return函数就直接结束b.确定函数的返回值：return 返回值（可以是具体的数据，声明过的变量，运算表达式） 什么是函数调用表达式函数调用语句就是函数调用表达式每个调用函数的语句都有结果，这个结果就是调用这个函数得到的返回值怎么使用返回值想要用函数的返回值，就是使用函数调用表达式的值普通数据能做的事情，函数调用表达式都可以做什么时候需要返回值初学者：看实现函数的功能会不会产生新的数据","link":"/函数基础/"},{"title":"函数","text":"函数匿名函数匿名函数就是没有函数名的函数；匿名函数可以看成是类型是function的值注意：匿名函数本质还是函数，函数中除了声明语法以外其他的都使用匿名函数 语法：lambda 参数列表: 返回值 说明 lambda –关键字参数列表 – 参数名1, 参数名2, …: – 固定返回值 – 任何由结果的表达式；它匿名函数的函数体，相当于普通函数中return语句 参数普通函数中除了用’参数名: 类型’的形式来指定参数类型以外，其他的语法匿名函数都支持12fx = lambda x, y: x + yprint(fx(1, 2)) 变量的作用域：变量在程序中能使用的范围 全局变量：没有声明在函数里面和类里面的变量就是全局变量&emsp;&emsp;&emsp;&emsp;&emsp;作用域是从声明开始到文件结束的任何位置 局部变量：声明在函数中的变量就是局部变量（函数的参数相当于声明在函数中的变量）&emsp;&emsp;&emsp;&emsp;&emsp;作用域是从声明开始到函数结束的任何位置 函数调用过程（内存）：压栈当调用函数的时候，系统会自动在内存的栈区间为这个函数开辟一个独立的内存区域，用来保存在函数中的声明的变量，当函数调用结束，这个内存区域会自动释放global和nonlocalglobal和nonlocal函数中的关键字，和return一样只能在函数体中使用 global – 在函数中声明一个全局变量global 变量变量 = 值 nonlocal – 在局部的局部中去修改局部变量的值nonlocal 变量变量 = 值1234567891011121314151617181920def func1(): a = 1 # 这是一个局部变量 global b b = 2 # 这是一个全局变量func1()print(b)def func2(): a = 1 def func3(): nonlocal a a = 2 print(a) func3() print(a)func2() 什么叫递归函数自己调用自己的函数（函数体中调用当前函数）循环能做的事情，递归都可以做 怎么写递归函数第一步：找临界值（循环结束的条件），在这儿要结束函数第二步：找关系 – 找f(n) 和 f(n-1)的关系（找当次和上次循环的关系）第三步：假设函数的功能已经实现，根据关系用f(n-1)去实现f(n)得功能 1234567891011121314151617181920212223242526def fb(n): if n == 1 or n == 2: return 1 return fb(n-1) + fb(n-2)print(fb(8))def tu(n): if n == 1: print('*') return print(n * '*') tu(n-1)tu(5)def star(n): if n ==1: print('*') return star(n-1) print(n * '*')star(3) 迭代器（iter）迭代器作为容器可以保存多个数据；数据的来源：1）将其他序列转换成迭代器 2）生成器 将其他序列转换成迭代器12345iter1 = iter('abc')print(iter1, type(iter1))iter2 = iter([1, 2, 3])print(iter1, type(iter2)) 获取元素不管用哪种方式去获取了元素的值，那么这个元素在迭代器中就不存在了 获取单个元素：next(迭代器)、迭代器.next() – 获取迭代器中第一个元素 遍历:for 变量 in 迭代器:123456789iter3 = iter('hello')print(next(iter3))print(next(iter3))print(next(iter3))print(iter3)iter4 = iter('world')for i in iter4: print(i) 生成器 生成器就是迭代器的一种 调用一个带有yield关键字的函数就可以得到一个生成器如果一个函数中有yield关键字：a.调用函数不会执行函数体b.函数调用表达式的值不是函数的返回值，而是一个生成器对象1234567# 创建一个生成器def func1(): print(\"======\") yield return 12gene1 = func1() # 这里gene1就是一个生成器对象print(gene1) 生成器产生数据的原理 一个生成器能够产生多少数据，就看执行完生成器对应的函数的函数体会遇到几次yieldyield后面的值就是生成器能够产生的数据 每次获取生成器中的元素的时候，都是先去执行函数体，直到遇到yield，并且将yield后面的值作为获取元素的结果；并且保留结束的位置，下次获取下一个值的时候，从上一次结束的位置接着执行函数体，直到遇到yield…如果从开始执行导函数结束都没有遇到yield就好报StopIteration错误12345678910111213def func2(): print('++++++++') yield 2 print('-----------') yield 100 # yield后边可以跟数据，同一个函数可以有多个yieldprint(next(func2()))print(next(func2()))gene2 = func2()print(gene2)print(next(gene2))# print(next(gene2))","link":"/函数/"},{"title":"高阶函数","text":"函数生成式生成式就是生成器的简写1.语法一生成器 = (表达式 for 变量 in 序列)2.说明：表达式 – 任何有结果的语句，数据，赋值后的变量，非赋值的运算表达式等…3.语法二 生成器 = (表达式 for 变量 in 序列 if 条件语句) 123456789101112131415161718192021# 用生成式创建生成器a = (100 for i in 'hello')print(next(a))print(next(a))print(next(a))print(next(a))print(next(a))b = (x for x in range(3))print(next(b))print(next(b))# 列表生成式list1 = list((x for x in range(5)))print(list1)list2 = [x for x in 'abc']print(list2)# 字典生成式dict1 = dict((x, x*2) for x in range(5))print(dict1)c = (x for x in range(10) if x % 2)print(list(c)) 补充：python中的三目运算符c、Java、js等中的三目运算符：条件语句?表达式1:表达式2python中的三目运算符：变量 = 表达式1 if 条件语句 else 表达式2三目运算符的功能：判断条件语句是否为True，如果是结果是表达式1，否则结果是表达式2 1234567a = 1num = '奇数' if a &amp; 1 else '偶数'print(num)# 练习：使用生成式写一个生成器能够产生1-10中所有的数能否被3整除的结果d = (True if x % 3 == 0 else False for x in range(1, 11))print(list(d)) python中声明函数就是声明类型是function的变量，函数名就是变量名普通变量能做的事情，函数都可以做 123456789101112131415161718# 1）用一个变量给另一个变量赋值a = 10b = adef func1(): print('========')c = func1c()# 2)修改变量的值func1 = 100# 3)变量作为序列的元素# 4）作为函数的参数# 5)变量作为函数的返回值def a(): print('a') def b(): print('b') return ba()() 装饰器 = 实参高阶函数 + 返回值高阶函数 + 糖语法实参高阶函数有一个参数是函数的函数就是高阶函数python中内置的sorted、max、min等函数，以及列表的sort方法都是实参高阶函数这些函数中都有一个参数key，要求传参的时候传一个函数。这个函数需要一个参数和一个返回值，参数代表序列中的元素，返回值是比较对象 1234567891011121314151617181920212223242526272829303132num = [3, 2, 44, 2, 33, 15, 86, 99]num.sort()print(num)# 问题1：按个位数大小对num中的元素从小到大进行排序def func1(ele): return ele % 10num.sort(key=func1)print(num)dict1 = [ {'name': '小明1', 'age': 23}, {'name': '小明1', 'age': 28}, {'name': '小明1', 'age': 18}, {'name': '小明1', 'age': 20}]dict1.sort(key=lambda ele: ele['age'])print(dict1)# 参数为函数def bar(): print(\"in the bar..\")def foo(func): func() print(\"in the foo..\")foo(bar)# 返回值为函数def bar(): print(\"in the bar..\")def foo(func): print(\"in the foo..\") return funcres=foo(bar)res() 返回值高阶函数123456789101112131415161718# 练习：声明一个函数operation，要求可以接收一个字符参数，最后根据字符值的不同返回不同功能的函数def operation(str1: str): if str1 == '+': def sum(*args): temp = 0 for x in args: temp += x return temp return sum if str1 == '-': def diff(*args): temp = 0 for x in args[1:]: temp -= x return temp return diffprint(operation('+')(1, 2, 3, 4))print(operation('-')(1, 2, 3, 4)) 什么是闭包闭包就是一个函数，这个函数需要满足以下两个条件：1.函数的返回值是声明在函数中的函数(内函数)2.这个内函数必须使用外函数中的临时变量（外函数中的局部变量）闭包的作用：保存临时变量的值（函数调用结束后，函数中的数据不销毁） 1234567def func1(x): a = 10 def func2(): print(x + a) print('内函数') return func2()func1(10) 装饰器是python的三大神器之一什么是装饰器：装饰器本质还是一个函数装饰器的作用：在不修改函数本身的前提下给函数添加功能装饰器语法：def 函数名1(参数1): -&gt;参数1为一个函数 &emsp;&emsp;def 函数名2(args, *kwargs):&emsp;&emsp;&emsp;&emsp;实现为原函数添加功能的代码&emsp;&emsp;&emsp;&emsp;（保证出现：参数1(args, **kwargs)）&emsp;&emsp;return 函数2@函数名1声明需要添加功能的函数 123456789101112131415# 练习：写一个装饰器，给函数添加权限def password(func): def test(*args, **kwargs): pwd = int(input('请输入密码：')) if pwd == 321: print('允许进入') func(*args, **kwargs) else: print(\"你没有权限\") return test@passworddef pwd(): print(\"欢迎进入\")pwd() 什么是回调函数：函数的调用是在其他函数的内部满足条件的时候自动调用的函数","link":"/高阶函数/"},{"title":"文件操作","text":"数据持久化保存在程序中的数据是保存在运行内存中的，当程序运行结束时，内存会自动释放，数据也会消失；如果不希望数据随着程序的结束而消失，就需要将数据通过文件存储到硬盘里面程序中经常用来保存数据的文件有：数据库的文件（db, sqlite）；json文件；plist文件；txt文件；png文件；jpg文件；gif文件；…mp4文件；mov文件；mp3等… 文件操作1.步骤：打开文件 -&gt; 操作文件内容（读操作、写操作 -&gt; 关闭文件a.打开文件： open(file, mode=’r’, encoding=None) – 以指定的方式打开指定文件并且返回文件说明：file – 字符串；文件在电脑中的路径；路径可以写绝对路径也可以写相对路径； 绝对路径 – 文件在电脑中的完整路径 相对路径 – ./代表当前目录（./可以省略） ../代表当前目录的上一级目录 …/代表当前目录的上一级目录的上一级目录 当前目录指的是当前py文件所在的目录 mode – 字符串；文件的打开方式，决定打开文件后能够对文件做什么以及读写的数据类型 ‘r’/‘rt’ – 只能以读取的方式打开文件，读出来的内容是字符串 ‘rb’ – 以只读的方式打开文件，读出来的内容是二进制数据(bytes) ‘w’/‘wt’ – 以只写的方式打开文件，将字符串写入文件；会清空原文件 ‘wb’ – 以只写的方式打开文件，将二进制写入文件 ‘a’/‘at’ – 以只写的方式打开文件，将字符串写入文件，不会清空原文件，追加 ‘ab’ – 以只写的方式打开文件，将二进制写入文件；不会清空原文件，追加encoding – 字符串；设置文本的编码方式（只针对文本文件有效）；一般使用’utf-8’ 注意：1.同一个文件读和写的编码方式一样2.只针对文本文件有效，所有带’b’的打开方式都不能设置encodingb.关闭文件文件对象.close() 12# open(r'D:\\zj.python\\day12-文件操作和异常处理\\test1.txt') # 绝对路径# open(r'./test1.txt') # 相对路径 读写操作1.读操作文件对象.read() – 读取整个文件内容，以字符串或者二进制的形式放返回文件对象.readline() – 获取文本文件中一行的内容，以字符串或者二进制的形式返回2.写操作文件.write(内容) – 将内容写到指定的文件中 建议使用以下方式进行文件操作with - open打开文件，在文件作用域中对文件进行操作，离开文件作用域文件自动关闭语法：with open(file, mode=’r’, encoding=None)as 文件对象: 文件对象(操作文件) 123456789101112131415# f = open('./test1.txt', encoding='utf-8')# print(f.read())# f.close()# with open('./files/test1.txt', 'r', encoding='utf-8') as f:# print(f.read())# f.seek(0) # 移动光标到文件开头# print(f.readline())# with open('test1.txt', 'w', encoding='utf-8') as f:# f.write('锄禾日当午')# with open('./files/test1.txt', 'r', encoding='utf-8') as f:# while True:# res = f.readline()# if not res:# break# print(res) 打开不存在文件以读的方式打开不存在文件：程序会出现FileNotFoundError异常以写的方式打开不存在的文件：不会出现异常，并且创建一个空的文件 二进制文件的读写123456789# with open('./files/u1.jpg', 'rb') as f:# content = f.read()# print(content)# with open('./files/u3.jpg', 'wb') as f:# f.write(content)# import requests# response = requests.get('https://www.baidu.com/img/bd_logo1.png?where=super')# with open('./files/baidu.png', 'wb') as f:# f.write(response.content) 怎么做到数据的持久化1.将数据保存到本地文件2.需要这个数据的时候不是直接赋值而是去从本地文件中去取值3.当数据值发生改变后，将最新的数据更新到文件中 123456# with open('./files/count.txt', 'r', encoding='utf-8') as f:# num = int(f.read())# num += 1# print('第{}次运行程序'.format(num))# with open('./files/count.txt', 'w', encoding='utf-8')as f:# f.write(str(num)) 什么是json数据json是python内置的模块，模块主要提供和json操作相关的函数json是一种通用的数据格式；几乎所有的高级语言都支持将json数据转换成当前语言数据，也支持将当前语言数据转换成json数据一般数据接口提供的数据都是json格式的数据 json格式json格式：a.一个json有且只能有一个数据 b.这个数据必须是json支持的数据类型的数据 json支持的数据类型数字类型 – 包括所有的数字（整数、小数）支持科学记数法字符串 – 用双引号引起来的字符集。例如:”abc”, “123”, “abc12”, “abc\\n123”布尔值 – 只有true和false两个值数组 – 相当于python中的列表：[]字典 – 相当于python中的字典，但是json中的key必须是字符串空值 – null；相当于python中的None，表示空和没有 将json数据转换成python数据12345678910111213a.对应关系json python数字类型 int/float字符串 str,双引号可能会变变成单引号布尔值 bool,true -&gt; True; false -&gt; False数组 list字典 dict空值 null -&gt; Noneb.转换方法json模块中有一个loads可以将json格式的数据转换成python对应的数据loads(字符串) -- 将json格式的字符串转换成python数据 注意：这儿的字符串中的内容必须是json数据 12345678# result = json.loads('100')# print(type(result), result)# result = json.loads('\"hello\"')# print(type(result), result)# result = json.loads('true')# print(type(result), result)# result = json.loads('[\"hello\", 123, false, null]')# print(result) 将python数据转换成json123456789101）转换关系python jsonint/float 数字str 字符串，引号全部变成双引号bool 布尔，True -&gt; true; False -&gt;falselist、tuple 数组dict 字典None null2)转换的方法dumps(数据) -- 将括号中的python数据转换成json格式的字符串","link":"/文件操作/"},{"title":"异常和模块","text":"异常运行程序的时候程序报错，又叫程序出现异常当执行程序的时候如果出现异常，出现异常的线程会直接崩溃，不会在执行线程中后面其他的代码 捕获异常1.语法一：try:&emsp;&emsp;代码块1 except:&emsp;&emsp;代码块2说明：try，except – 关键字，固定写法代码块1 – 和try保持一个缩进的的一条或多条语句 需要捕获异常的代码代码块2 – 和except保持一个缩进的一条或多条语句 异常发生或会执行的代码 执行过程：先执行代码块1，如果在执行代码块1的时候出现了异常，程序不崩溃，直接执行代码块2， 然后再执行后面的其他语句；如果在执行代码块1的时候没有出现异常，代码块2不会执行， 直接执行后面的其他语句 2.语法二：捕获指定异常try:&emsp;&emsp;代码块1except 异常类型:&emsp;&emsp;代码块2 执行过程：先执行代码块1，如果执行代码块1的时候出现异常，检查异常类型和except后面的异常类型是否一致；如果一致程序不崩溃，直接执行代码块2；如果不一致，程序直接崩溃；如果执行代码块1的时候没有出现异常，不执行代码块2，接着往后执行 3.语法三：同时捕获指定多个异常try:&emsp;&emsp; 代码块1except(异常类型1, 异常类型2):&emsp;&emsp;代码块2 4.语法四：try:&emsp;&emsp;代码块1except 异常类型1:&emsp;&emsp;代码块11except 异常类型2:&emsp;&emsp;代码块22… finally关键字前面四种捕获异常的结构最后都可以添加finallytry:&emsp;&emsp;代码块1except:&emsp;&emsp;代码块2finally:&emsp;&emsp;代码块3其他语句 抛出异常主动让程序崩溃 语法：raise 异常类型说明：异常类型必须是Exception的子类 什么是模块python中的一个py文件就是一个模块 怎么在一个模块中使用另外一个模块中的内容如果要在一个模块中使用另外一个模块中的内容，必须先导入模块1.语法：import 模块名 – 导入指定模块，导入后可以在当前模块中使用模块中的所有的全局变量以’模块名.全局变量名’的方式去使用from 模块名 import 变量名1，变量名2，… – 导入指定模块，导入后只能使用import后面指定的变量导入后指定的全局变量在当前模块中直接使用，不用在前面加’模块名.’from 模块名 import * – 导入指定模块，导入后可以在当前模块中使用模块中的所有的全局变量；导入后全局变量直接使用，不用加’模块名.’ import 模块名 as 新模块名 – 导入后采用新模块名去使用模块中的内容from 模块名 import 变量名1 as 新变量名1， 变量名2，… – 可以自由选择变量名进行重命名 123456789101112131415import test# 导入方式一# print(test.test_a)# print(test.test_str1)# test.func1()# 导入方式二# from test import test_a,func1# print(test_a)# func1()# 导入方式三# from test import *# print(test_a)# func1() 导入模块的原理当执行导入模块的代码的时候，会直接执行被导入的模块中所有的代码1.重复导入问题import在导入模块的时候会自动检查这个模块之前是否导入过，来避免一个模块的重复导入2.阻止模块中的内容被其他模块导入将不需要被其他模块执行的语句写入’if name == ‘main‘:’对应的if语句中 什么是包一个带有init.py文件的文件夹就叫包import 包直接导入包 – 只执行init文件 从包中导入指定的模块from animal import bird 从包中的模块导入模块hash加密特点：a.相等的数据采用同一个加密算法，保证加密结果一样b.通过加密后的数据不能反向获取原数据c.采用同样的加密算法，不管原数据的大小是多少，加密后的数据的长度是一样的加密步骤：1.根据加密算法创建hash对象2.对数据进行加密3.根据hash对象获取加密后的数据 123456import hashlibpw = input('请输入密码：')hash = hashlib.sha256()hash.update(pw.encode()) # bytes(pw, encoding='utf-8')result = hash.hexdigest()print(result) 123456#test.pytest_a = 100test_str1 = 'hello'def func1(): print('test中的函数')func1()","link":"/异常和模块/"},{"title":"面向对象基础","text":"编程思想：面向过程编程、函数式编程、面向对象编程面向过程编程 – 算法和逻辑函数式编程 – 函数面向对象编程 – 类和对象 什么是类，什么是对象类就是拥有相同属性、相同功能的对象的集合（抽象的）对象就是类的实例（具体的） 类的声明 – 确定这个类共同的属性和功能是什么1.语法：class 类名:&emsp;&emsp;类的说明文档&emsp;&emsp;类的内容2.说明：class – 关键字类名 – 要求：标识符，不能是关键字 规范：a.首字母大写，采用驼峰式命名规范 b.见名知义 c.不能使用系统提供的函数名或者类名类的说明文档 – 和函数说明文档一样类的内容 – 主要包括含属性和方法（方法就是声明在类中的函数） 1234567891011121314151617class Person: \"\"\" 属性 -- 方法 -- \"\"\" def eat(self, food): print('人吃{}'.format(food))# 3、声明对象\"\"\"1）语法：对象 = 类()\"\"\"p1 = Person() # p1中存储的就是Person类的对象p2 = Person() # 同一个类可以创建多个对象 对象方法类中方法分为：对象方法、类方法和静态方法1.对象方法：a.怎么声明：直接声明(声明前不需要加装饰器)在类中的函数b.特点：自带self参数；用对象调用对象方法的时候self不用传参，系统会自动将当前对象传给self,self可以做到谁调用就指向谁.c.怎么调用：以’对象.对象方法()’的形式来调用 – 通过对象来调用对象方法 12345678class Person: def eat(self): print('吃饭')p1 = Person()p1.eat()# Person.eat() 构造函数 – 函数名和类名一样，用来创建类的对象的函数python中声明类的时候，系统会自动为这个类创建一个构造函数，函数的作用是创建对象构造方法的执行过程：a.在内存中开辟空间创建对象 b.用创建好的对象去调用init方法 c.返回对象在内存中的地址 init方法声明在类中用来对对象进行初始化的方法；（当对象一创建出来，这个方法就会被自动调用）注意：创建对象的时候需不需要传参，需要传几个参数，看这个类的init方法 1234class Dog: def __init__(self, name, age): print('初始化方法', name, age)d = Dog(\"旺财\", 2) 类中的属性属性就是声明在类中的变量类中的属性分为：字段和对象属性1.字段a.怎么声明:声明在类的里面函数的外面的变量就是字段b.怎么使用：通过类去使用（以’类.字段’的形式使用）c.什么时候使用：属性的值不会因为对象不同而不同，这样的属性就声明成类的字段2.对象属性（重要）a.怎么声明：以’self.属性名=值’的形式声明在init方法中b.怎么使用：通过实例对象去使用c.什么时候使用：属性的值可能会因为对象不同而不一样，这样的属性就声明成对象属性 12345678910111213141516171819202122# 练习：# 1）声明一个Dog类，拥有属性：名字、年龄、性别、类型；# 要求创建对的时候，名字、品种必须赋值，年龄和性别可以赋值也可以不赋值# 2）拥有两个对象方法，一个用来大打印狗的信息（显示信息的方法）和一个叫的方法：以***:汪汪汪的格式打印叫唤信息class Dog: def __init__(self, name, var, age=0, gender='male'): self.name = name self.age = age self.gender = gender self.var = var def info(self): print(self.name, self.age, self.gender, self.var) def call_out(self): print('{}:汪汪汪'.format(self.name))dog1 = Dog('旺财', '哈士奇')dog1.info()dog1.call_out()dog2 = Dog('小黄', '中华田园犬', 2, 'male')dog2.info()dog2.call_out() 类中的属性属性就是声明在类中的变量类中的属性分为：字段和对象属性1.字段a.怎么声明:声明在类的里面函数的外面的变量就是字段b.怎么使用：通过类去使用（以’类.字段’的形式使用）c.什么时候使用：属性的值不会因为对象不同而不同，这样的属性就声明成类的字段2.对象属性（重要）a.怎么声明：以’self.属性名=值’的形式声明在init方法中b.怎么使用：通过实例对象去使用c.什么时候使用：属性的值可能会因为对象不同而不一样，这样的属性就声明成对象属性 12345678910111213141516171819202122# 练习：# 1）声明一个Dog类，拥有属性：名字、年龄、性别、类型；# 要求创建对的时候，名字、品种必须赋值，年龄和性别可以赋值也可以不赋值# 2）拥有两个对象方法，一个用来大打印狗的信息（显示信息的方法）和一个叫的方法：以***:汪汪汪的格式打印叫唤信息class Dog: def __init__(self, name, var, age=0, gender='male'): self.name = name self.age = age self.gender = gender self.var = var def info(self): print(self.name, self.age, self.gender, self.var) def call_out(self): print('{}:汪汪汪'.format(self.name))dog1 = Dog('旺财', '哈士奇')dog1.info()dog1.call_out()dog2 = Dog('小黄', '中华田园犬', 2, 'male')dog2.info()dog2.call_out()","link":"/面向对象基础/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"}],"categories":[{"name":"Python基础","slug":"Python基础","link":"/categories/Python基础/"}]}