{"pages":[],"posts":[{"title":"变量与运算符","text":"变量概念：变量是在程序中开辟空间存储数据用的语法：变量名 = 值说明：变量名由程序员自己命名变量名命名要求：为标识符，但不能是关键字；而且要遵守PEP8命名规范(即变量名中所有的字母都小写，如果由多个单词组成，单词之间用下划线隔开；在命名时，要做到见名知义，看见变量名大概知道变量名中存储的是什么数据) =： 赋值符号，将右边的值赋给左边的变量值：任何有结果的表达式，可以是具体的数据，也可以是赋值过的变量，也可以是运算表达式 1234567891011121314num = 100name = \"小明\"num2 = num# 修改变量num的值num = 200# 变量可以存储不同的数据类型num = \"mark\"# 变量必须先声明/赋值再使用# 同时声明声明多个变量，赋相同的值：变量名1=变量名2=变量名3= ... = 值a = b = c = 10print(a, b, c)# 同时声明多个变量，赋不相同的值：变量名1， 变量名2， 变量名3， ... = 值1， 值2， 值3，...name, age, gender = \"铭\", 22, \"man\"print(name, age, gender) 声明变量和给变量赋值的原理（重要）先在内存中开辟空间存储数据，（内存空间的大小由数据的大小动态分配），然后再将保存数据的内存空间的地址赋给变量用一个变量给另一个变量赋值的时候，实质是将变量中的地址赋给新的变量 运算符：数学运算符、比较运算符、逻辑运算符、位运算、赋值运算符运算符的优先级：数学运算符&gt;比较运算符&gt;逻辑运算符&gt;赋值运算符&gt;位运算符数学运算符的优先级：** &gt; * &gt; / &gt; // &gt; % &gt; + &gt; - 逻辑运算符：and(逻辑与运算), or(逻辑或运算), not(逻辑非运算)所有的逻辑运算符的运算对象是布尔，结果也是布尔 and:a.运算规则：两个都为True结果才是True，只要一个是False结果就是Falseb.什么时候用：当希望多个条件同时满足的时候，就用and将多个条件连接，and相当于生活中的并且 1234grade = 4score = 88# 1）条件：grade&gt;=4并且score&gt;=90print(grade &gt;= 3.5 and score &gt;= 90) or:a.运算规则：两个都为False结果才为False，只要有一个是True结果就是Trueb.什么时候用：当希望多个条件只要有一个满足的时候，就用or将多个条件连接，or相当于生活中的或者 1234grade = 4score = 88# 1）条件：grade&gt;=4并且score&gt;=90print(grade &gt;= 3.5 or score &gt;= 95) not:a.运算规则：True变False， False变Trueb.什么时候使用：对某个条件进行否定 短路操作逻辑与运算的短路操作：当and前面的表达式的值是False的时候，程序不会再去执行and后面的表达式逻辑或运算的短路操作：当or前面的表达式的值是True的时候，程序不会再去执行or后面的表达式 12345678练习1# 1）判断一个数能否被2或者5整除num1 = int(input(\"please input a number:\"))print(num1 % 2 == 0 or num1 % 5 == 0)# 2）判断一个数是否能同时被2和5整除print(num1 % 2 == 0 and num1 % 5 == 0)# 3）判断一个数是否是3或者7的倍数，并且这个数的末尾不是3print((num1 % 3 == 0 or num1 % 7 == 0) and num1 % 10 != 3) 赋值运算符: =, +=, -=, =, /=, %=, //=, *=不管是什么样的赋值运算符，最终的操作都是给变量赋值；所以赋值运算符的左边必须是变量复合和赋值运算符：先将赋值符号左边变量中的值取出来，然后进行指定的运算，最后将运算结果再从新赋值给左边的变量注意：复合的赋值运算符的左边必须是已经赋值过的变量 位运算：&amp;(按位与运算)， |(按位或运算)，^(按位异或)， ~(按位取反)， &lt;&lt;(左移)， &gt;&gt;(右移)1、按位与数字1 &amp; 数字2 –&gt; 两个数字补码上相同位置上的数，如果都是1结果就是1， 如果有一个是0结果就是01 &amp; 1 -&gt;11 &amp; 0 -&gt;00 &amp; 1 -&gt;00 &amp; 0 -&gt;0 2、按位或数字1 | 数字2 –&gt; 两个数字补码上相同位置上的值如果都是0结果才是0，只要有一个1结果就是11 | 1 -&gt;11 | 0 -&gt;10 | 1 -&gt;10 | 0 -&gt;0 3、按位取反~数字 –&gt; 将数字补码上的每一位的值由0变成1，1变成0~1 -&gt;0~0 -&gt;1 4、按位异或数字1 ^ 数字2 –&gt; 两个数补码上相同位置上的值，如果相同结果是0，不同结果是11 ^ 1 -&gt; 01 ^ 0 -&gt; 10 ^ 1 -&gt; 10 ^ 0 -&gt; 0特点：一个数异或同一个数两次，结果就是这个本身 5、左移数字 &lt;&lt; N –&gt; 让数字的补码整体左移N位，低位用0补充（数字* （2**N）） 6、右移数字 &gt;&gt; N –&gt; 让数字的补码整体右移N位，正数高位补0，负数高位补1（数字//（2**N）） 应用：1、乘2的次方或者整除2的次方的操作(&lt;&lt;, &gt;&gt;)2、数字 &amp; 1 == 0 -&gt; 偶数；数字 &amp; 1 == 1 -&gt; 奇数","link":"/变量与运算符/"},{"title":"进制","text":"print()函数print()函数，功能是在控制台输入括号中的内容 1print(\"hello world!\") 注释注释是代码中对代码进行解释和说明的文本内容；不会影响程序的功能和执行 单行注释：在一行文字的前面加#多行注释：将注释内容写在三个双引号或三个单引号里面（但一般使用三个双引号） 语句一条语句占一行，语句结束后不用加分号如果一行要显示多行语句，语句必须用分号隔开 12num_1 = 1num_2 = 2 ; num_3 = 3 如果一条语句很长，需要多行显示的时候，可以在与语句中\\然后再换行（注意：不能破坏数据本身） 123num1 = 12 + 2 + 23 - 34\\ - 22 + 2print(num1) 缩进python中一行代码的开头不能随便的加缩进（空格或者制表符）python语法要求必须要有缩进的位置一定要加缩进 1234if num &gt; 10: print(num) else: print(None) 标识符标识符是用来命名用的，一般是给变量命名、函数命名或者类命名……标识符规则：所有标识符都必须是由字母、数字、下划线组成；不能以数字开头注意：python2.x以后，标识符中可以出现中文、日语、韩语等符号，但是实际开发不建议使用 关键字（保留字）关键字就是python中有特殊功能和特殊意义的标识符 12345678910import keywordprint(keyword.kwlist)\"\"\"['False', 'None', 'True', 'and', 'as', 'assert','break', 'class', 'continue', 'def', 'del', 'elif','else', 'except', 'finally', 'for', 'from','global', 'if', 'import', 'in', 'is', 'lambda','nonlocal', 'not', 'or', 'pass', 'raise','return', 'try', 'while', 'with', 'yield']\"\"\" 常见数据类型和数据数字数据：整型(int)、浮点型(float)字符串(str)：用双引号或者单引号将文本数据引起来布尔(bool)：只有False、True两个值，True代表真/肯定，False代表假/否定列表(list)、元组(tuple)、集合(set)、字典(dict)、函数(function)等类型转换：类型名（数据）-&gt;将括号中的数据转换成指定的类型并返回 12print(int(2.33))print(float(10)) print和inputprint函数:输出函数，在控制台打印print后面括号中的内容的结果input函数:获取从控制台输入的的内容(输入回车的时候就完成)input(提示信息)；不管在键盘上输入的是什么，input返回的结果的类型都是字符串类型 12value = input('hello world:')print(value, type(value)) 计算机只能存储和处理二进制数据int类型–包含所有的整数，整数可可以表示为十进制、二进制、八进制和十六进制 十进制a.基数:0,1,2,3,4,5,6,7,8,9b.进位:逢十进一c.位权:123 = 100 + 20 + 3 = 110^2 + 210^1 + 3*10^0d.表示方式:默认写入为十进制 二进制a.基数:0, 1b.进位:逢二进一c.位权:111(2) = 12^2 + 12^1 + 1*2^0 = 7(10)d.表示方式:在二进制数前加上前缀0b或0Be.转换:直接打印 八进制a.基数:0, 1, 2, 3, 4, 5, 6, 7b.进位:逢八进一c.位权:111(8) = 18^2 + 18^1 + 1*8^0 = 73(10)d.表示方式:在八进制数前加上前缀0o或者0Oe.转换:oct() 十六进制a.基数:0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A/a, B/b, C/c, D/d, E/e, F/fb.进位:逢十六进一c.位权:111(16) = 116^2 + 116^1 + 1*16^0 = 273(273)d.表示方式:在十六进制数前加上前缀0x或0Xe.转换:hex() 123456789num_2 = 0b1101print('转二进制', bin(100), bin(0o100), bin(0x100e))print(num_2)num_8 = 0o67print('转八进制', oct(0b100), oct(100), oct(0x100e))print(num_8)num_16 = 0xe34aprint('转十六进制', hex(100), hex(0o100), hex(0b100))print(num_16) 计算机存数据的时候，只能存数字，而且存的是数字的二进制的补码位(bit)1字节(byte) = 8bit1kb = 1024byte1M = 1024kb1G = 1024M1T = 1024G 注意：正数的原码、反码、补码一样1、原码 = 符号位(0表示正，1表示负) + 真值(数字转换成二进制的值)10 -&gt; 1010(真值) -&gt;101010的原码:00000000 00000000 00000000 00001010-10的原码:10000000 00000000 00000000 000010102、负数的反码:符号为不变，其他位取反(0变1，1变0)10的反码:00000000 00000000 00000000 00001010-10的反码:11111111 11111111 11111111 111101013、负数的补码:反码加110的补码:00000000 00000000 00000000 00001010-10的补码:11111111 11111111 11111111 11110110","link":"/进制/"},{"title":"分支与循环","text":"python中的分支结构只有if语句if语句：a.语法：满足某个条件才执行某段代码if 条件语句：&emsp;&emsp;代码段 b.说明：if – 关键字，固定写法&emsp;&emsp;条件语句 – 可以是一个具体的数据，也可以是一个已经赋值过的变量，或者是运算表达式（不能是赋值语句）&emsp;&emsp;: – 固定写法&emsp;&emsp;代码段 – 一条或者多条和if保持一个缩进的语句（任何语句）c.执行过程：先判断条件语句的结果是否为True（如果不是布尔就先转换为布尔），如果为True就执行代码段，然后再执行后面其他的 语句，如果是False，不执行代码段，直接执行其他语句 补充：布尔值转换 – python中所有的数据都能转换成布尔，所有为0为空的值都会转换成False，其他都是True 123456#输入年龄，如果输入的年龄值大于等于18岁，打印\"可以进网吧\"age = int(input(\"请输入一个整数：\"))if age &gt;= 18: print(\"可以进网吧\")else: print(\"未成年禁止入内\") if - else 语句：满足条件执行某段代码，不满足这个条件的时候执行另外一段代码a.语法：if 条件语句1:&emsp;&emsp;代码段1else:&emsp;&emsp;代码段2b.说明：if/else – 关键字，固定写法条件语句 – 可以是一个具体的数据，也可以是一个已经赋值过的变量，或者是运算表达式（不能是赋值语句）– 固定结构代码段1 – 和if保持一个缩进的一条或者多条语句（满足if后面的条件才会执行）代码段2 – 和else保持一个缩进的一条或者多条语句（if后面的条件不成立才会执行）c.执行过程：先判断条件语句是否为True，如果为True就执行代码段1，否则执行代码段2if - elif - else语句： 条件有多个（有关联）时，执行不同的代码段a.语法：if 条件语句1:&emsp;&emsp;代码段1elif 条件语句2:&emsp;&emsp;代码段2elif 条件语句3:&emsp;&emsp;代码段3 . . .else:&emsp;&emsp;代码段nb.执行过程：先判断条件语句1是否为True,如果为True就执行代码段1，然后整个if结构结束直接执行其他语句； 如果条件语句1为False，就判断条件语句2是否为True，为True就执行代码段2再执行其他语句； 如果条件语句2为False，就判断条件语句3是否为True，为Ture就执行代码段3再执行其他语句； 以此类推 如果所有的条件语句都是False，就执行代码段n，再执行其他语句 123456789101112131415161718# 根据输入的年龄值，判断年龄处于的阶段age = int(input(\"please input a number:\"))if 0 &lt; age &lt; 3: print(\"幼儿\")elif age&lt;= 12: print(\"儿童\")elif age &lt;= 18: print(\"青少年\")elif age &lt;= 28: print(\"青年\")elif age &lt;= 50: print(\"壮年\")elif age &lt;= 75: print(\"中老年\")elif age &lt;= 100: print(\"老年\")else: print(\"成仙\") if语句嵌套再if结构中的if、else、elif后面的代码段中，还可以写其他的if语句 1234567num = int(input(\"please input a number:\"))if num &amp; 1 == 1: print(\"奇数\")else: print(\"偶数\") if num % 4 == 0: print(\"是4的倍数\") for循环：a.语法：for 变量名 in 序列:&emsp;&emsp;循环体b.说明：for – 关键字变量名 – 要求和声明变量的时候的变量名一样in – 关键字序列 – 容器型数据型类型的数据，例如：字符串、列表、元组、字典、集合、迭代器、生成器、range循环体 – 和for保持缩进的一条或者多条语句；循环体中的代码就是需要重复执行的代码c.执行过程：让变量去序列中取值，一个一个的取，取完为止，每取一个值执行一次循环体（python中控制for循环的循环次数，是通过控制in后面序列元素的个数来控制的） 123# 练习：打印十行\"===\"for k in \" \"*10: print(\"====\") range函数 – 产生指定范围内的数字序列range(n) – 产生0n-1的整数数列range(m, n) – 产生mn-1的整数数列range(m, n, step) – 从m开始每次加step产生下一个数，直到n前一个为止 12345678910111213141516print(list(range(10)))for i in range(10): print(i)for i in range(1, 10): print(i)# 练习：使用循环计算1+2+3+...+100num = 0for i in range(1, 101): num += iprint(num)# 练习：统计100以内能够被2整除但是不能被3整除的个数n = 0for i in range(100): if i % 2 == 0 and i % 3 != 0: n += 1print(n) while循环a.语法：while 条件语句：&emsp;&emsp;循环体b.说明：while – 关键字条件语句 – 只要有结果的表达式都可以（赋值语句不行）循环体 – 和while保持一个缩进的一条或者多条的语句；（需要重复执行的代码放在循环体中）c.执行过程先判断条件语句是否为True，如果为True就执行循环体，执行完循环体再判断条件语句是否为True，为True又执行循环体，以此类推，当判断条件语句的结果为False，整个循环结束，指向后面的其他语句 for和while循环怎么选循环次数确定的时候使用for循环循环次数不确定和死循环要使用while循环 12345# 练习：num = int(input(\"please input a number:\"))while num != 0: num = int(input(\"please input a number:\"))print(\"ok\") 123456789account = int(input(\"请输入账号：\"))pwd = int(input(\"请输入密码：\"))while account != 666 or pwd != 123456: print(\"账号或者密码错误!\") account = int(input(\"请重新输入账号：\")) pwd = int(input(\"请重新输入密码：\")) while account == 666 and pwd == 123456: print(\"登录成功\") break 12345678# 练习：输入数字，直到输入的数字是0，统计输入偶数的个数num = int(input(\"please input number:\"))n = 0while num != 0: if num % 2 == 0: n += 1 num = int(input(\"please input number:\"))print(n) continue：continue是能出现在循环体中的关键字；当执行循环体的时候遇到了continue，当次循环结束，执行进入下次循环的判断 break:只能用在循环体中的关键字执行循环体的时候，如果遇到break，整个循环直接结束 else：for 变量 in 序列:&emsp;&emsp;循环体else:&emsp;&emsp;代码段 while 条件语句:&emsp;&emsp;循环体else:&emsp;&emsp;代码段执行过程：如果循环自然结束，else后面的代码段会执行，如果循环是因为遇到break而结束， else后面的代码段不会执行 123456789sum1 = 1num = 1while True: num += 1 sum1 += num if sum1 &gt;10000: print(num-1) print(sum1) break 123456for i in range(4): print(i) breakelse: print(\"-------\")print(\"=========\")","link":"/分支和循环/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"}],"categories":[{"name":"Python基础","slug":"Python基础","link":"/categories/Python基础/"}]}